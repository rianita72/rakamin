import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from imblearn.over_sampling import SMOTE

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from surprise import SVD, Dataset, Reader, accuracy
from surprise.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from scipy import stats
import math



import gc

#Exploratory Data Analysis
df = pd.read_csv('Travel.csv')

df.head()

Descriptive Statistics
df.info()

df.describe()

# define numerical & categorical columns
cat_cols = df.select_dtypes(include='object').columns.tolist()
num_cols = df.select_dtypes(exclude='object').columns.tolist()

df[cat_cols].describe().T

df[num_cols].describe()

for col in cat_cols:
    print(f'''Value count kolom {col}:''')
    print(df[col].value_counts())
    print()
    
#Univariate Analysis

plt.figure(figsize=(12,8))
for i in range(0, len(num_cols)):
    plt.subplot(3, 6, i+1)
    sns.boxplot(y=df[num_cols[i]], x=df['ProdTaken'],showfliers=False , orient='v')
    plt.tight_layout()
    
    
num_cols_count = len(num_cols)
num_rows = math.ceil(num_cols_count / 3)
num_figures = math.ceil(num_cols_count / 9)

for f in range(num_figures):
    start_idx = f * 9
    end_idx = min(start_idx + 9, num_cols_count)
    plt.figure(figsize=(18, 15))
    for i, col in enumerate(num_cols[start_idx:end_idx]):
        plt.subplot(num_rows, 3, i+1)
        sns.histplot(df[col].dropna(), kde=True, color='skyblue')
        plt.xlabel(col)
        plt.ylabel('Count')
    plt.tight_layout()
    plt.show()
    
 
# Univariate analysis for categorical columns
num_cat_cols = len(cat_cols)
num_rows = (num_cat_cols - 1) // 3 + 1
plt.figure(figsize=(15, 5*num_rows))
for i, col in enumerate(cat_cols):
    plt.subplot(num_rows, 3, i+1)
    sns.countplot(x=col, data=df, hue=df['ProdTaken'])
    plt.xlabel(col)
    plt.ylabel('Count')
plt.tight_layout()
plt.show()

corr_matrix = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix Heatmap', fontsize=16, fontweight='bold')
plt.xticks(rotation=80)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()


#Business Insight and Visualization

# Select the relevant columns for analysis
selected_columns = ['Gender', 'MaritalStatus', 'Occupation', 'ProdTaken']  # Modify with the desired columns
data = df[selected_columns]

# Filter only rows where product was taken (ProdTaken = 0)
data = data[data['ProdTaken'] == 0]

# Create cross-tabulation table
cross_tab = pd.crosstab(index=[data['Gender'], data['MaritalStatus']], columns=data['Occupation'])

# Plot the heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(cross_tab, cmap='YlGnBu', annot=True, fmt='d', cbar=True)
plt.xlabel('Occupation', fontsize=12)
plt.ylabel('Gender, Marital Status', fontsize=12)
plt.title('Gender, Marital Status, and Occupation Who Did Not Purchase', fontsize=14, fontweight='bold')
plt.xticks(rotation=90)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()


# Select the relevant columns for analysis
selected_columns = ['Gender', 'MaritalStatus', 'Occupation', 'ProdTaken']  # Modify with the desired columns
data = df[selected_columns]

# Filter only rows where product was taken (ProdTaken = 1)
data = data[data['ProdTaken'] == 1]

# Create cross-tabulation table
cross_tab = pd.crosstab(index=[data['Gender'], data['MaritalStatus']], columns=data['Occupation'])

# Plot the heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(cross_tab, cmap='YlGnBu', annot=True, fmt='d', cbar=True)
plt.xlabel('Occupation', fontsize=12)
plt.ylabel('Gender, Marital Status', fontsize=12)
plt.title('Purchase of Product by Gender, Marital Status, and Occupation', fontsize=14, fontweight='bold')
plt.xticks(rotation=90)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

# Segment age into categories
df['AgeCategory'] = pd.cut(df['Age'], bins=[0, 18, 25, 35, 50, 100], labels=['<18', '18-25', '26-35', '36-50', '50+'])

# Count the number of purchases by age category
purchase_counts = df.groupby('AgeCategory')['ProdTaken'].sum().reset_index()

# Calculate the total purchases
total_purchases = purchase_counts['ProdTaken'].sum()

# Calculate the percentage of purchases by age category
purchase_counts['Percentage'] = purchase_counts['ProdTaken'] / total_purchases * 100

# Plot the purchase counts by age category
plt.figure(figsize=(8, 6))
ax = sns.barplot(x='AgeCategory', y='ProdTaken', data=purchase_counts, color='steelblue')
plt.xlabel('Age Category')
plt.ylabel('Number of Purchases')
plt.title('Number of Purchases by Age Category')

# Annotate percentages on the bars
for i, row in purchase_counts.iterrows():
    percentage = row['Percentage']
    ax.annotate(f'{percentage:.2f}%', xy=(i, row['ProdTaken']), ha='center', va='bottom', color='black')

plt.show()
'''
# Calculate the purchase rate by age category
df['PurchaseRate'] = df['ProdTaken'].div(df.groupby('AgeCategory')['ProdTaken'].transform('sum'))

# Plot the purchase rate by age category
plt.figure(figsize=(8, 6))
sns.barplot(x='AgeCategory', y='PurchaseRate', data=df, color='skyblue')
plt.xlabel('Age Category')
plt.ylabel('Purchase Rate')
plt.title('Purchase Rate by Age Category')
plt.show()

# Calculate the purchase percentage by CityTier
purchase_percentage = df.groupby('CityTier')['ProdTaken'].mean() * 100

# Plot the purchase percentage by CityTier
plt.figure(figsize=(8, 6))
ax = sns.barplot(x=purchase_percentage.index, y=purchase_percentage.values, color='steelblue')
plt.xlabel('CityTier')
plt.ylabel('Purchase Percentage')
plt.title('Purchase Percentage by CityTier')

# Display percentages on the bars
for i, value in enumerate(purchase_percentage):
    ax.text(i, value, f'{value:.2f}%', ha='center', va='bottom', color='black')

plt.show()

# Calculate the purchase percentage by CityTier
purchase_percentage = df.groupby('Passport')['ProdTaken'].mean() * 100

# Plot the purchase percentage by CityTier
plt.figure(figsize=(8, 6))
ax = sns.barplot(x=purchase_percentage.index, y=purchase_percentage.values, color='steelblue')
plt.xlabel('Passport')
plt.ylabel('Purchase Percentage')
plt.title('Purchase Percentage by Passport')

# Display percentages on the bars
for i, value in enumerate(purchase_percentage):
    ax.text(i, value, f'{value:.2f}%', ha='center', va='bottom', color='black')

plt.show()




